val foo :
  'k 'cmp.
     (module S
        with type Id_and_repr.t = 'k
         and type Id_and_repr.comparator_witness = 'cmp )
  -> 'k Jane_symbol.Map.t
  -> ('k, Sockaddr.t, 'cmp) Map.t

type ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt

type t_value

type t_imm [@@immediate]

type t_imm64 [@@immediate64]

type t_float64

type t_any

type t_void

(***************************************)
(* Test 1: annotation on type variable *)

let x : int as 'a = 5

let x : int as 'a = 5

let x : int as 'a = 5

let x : int as 'a = 5

let x : (int as 'a) list as 'b = [3; 4; 5]

let x : int list as 'a = [3; 4; 5]

(****************************************)
(* Test 2: Annotation on type parameter *)

type 'a t2_imm

type _ t2_imm'

type t1 = int t2_imm

type t2 = bool t2_imm

type 'a t2_float64

type _ t2_float64'

type t3 = float t2_float64

module M1 : sig
  type 'a t
end = struct
  type _ t
end

module M2 : sig
  type _ t
end = struct
  type 'a t
end

type t = string t2_imm

let f : 'a t2_imm -> 'a t2_imm = fun x -> x

let f : 'a t2_imm -> 'a t2_imm = fun x -> x

let f : 'a t2_imm -> 'a t2_imm = fun x -> x

let f : 'a. 'a t2_imm -> 'a t2_imm = fun x -> x

let f : 'a. 'a t2_imm -> 'a t2_imm = fun x -> x

type 'a t = 'a t2_imm

type 'a t = 'a t2_imm

type 'a t = 'a t2_imm

let f : _ t2_imm -> unit = fun _ -> ()

let g : _ t2_imm -> unit = fun _ -> ()

let f : _ -> unit = fun _ -> ()

let g : _ -> unit = fun _ -> ()

let f : _ -> _ = fun _ -> assert false

let g : _ -> _ = fun _ -> assert false

(********************************************)
(* Test 3: Annotation on types in functions *)

let f : 'a -> 'a = fun x -> x

let f : 'a. 'a -> 'a = fun x -> x

let f : 'a. 'a -> 'a = fun x -> x

(********************************************)
(* Test 4: Annotation on record field types *)

type r = {field: 'a. 'a -> 'a}

let f {field} = field 5

type rf = {fieldf: 'a. 'a -> 'a}

let f {fieldf} = fieldf (Stdlib__Float_u.of_float 3.14)

let f {field} = field "hello"

let r = {field= (fun x -> x)}

let r = {field= Fun.id}

let r = {field= (fun (type a) (x : a) -> x)}

let r = {field= (fun (type a) (x : a) -> x)}

type r_value = {field: 'a. 'a -> 'a}

let r = {field= (fun (type a) (x : a) -> x)}

(* CR layouts v1.5: that's a pretty awful error message *)

type 'a t_imm

type s = {f: 'a. 'a -> 'a u}

and 'a u = 'a t_imm

(* CR layouts v1.5: the location on that message is wrong. But it's hard to
   improve, because it comes from re-checking typedtree, where we don't have
   locations any more. I conjecture the same location problem exists when
   constraints aren't satisfied. *)

(********************)
(* Test 5: newtypes *)

let f (type a) (x : a) = x

let f (type a) (x : a) = x

let f (type a) (x : a) = x

let f (type a) (x : a) = x

(****************************************)
(* Test 6: abstract universal variables *)

let f : type a. a -> a = fun x -> x

let f : type a. a -> a = fun x -> x

let f : type a. a -> a = fun x -> x

let f : type a. a -> a = fun x -> x

(**************************************************)
(* Test 7: Defaulting universal variable to value *)

module type S = sig
  val f : 'a. 'a t2_imm -> 'a t2_imm
end

let f : 'a. 'a t2_imm -> 'a t2_imm = fun x -> x

(********************************************)
(* Test 8: Annotation on universal variable *)

module type S = sig
  val f : 'a. 'a t2_imm -> 'a t2_imm
end

module type S = sig
  val f : 'a t2_imm -> 'a t2_imm

  val g : 'a. 'a t2_imm -> 'a t2_imm
end

module type S = sig
  val f : 'a t2_float64 -> 'a t2_float64

  val g : 'a. 'a t2_float64 -> 'a t2_float64
end

(************************************************************)
(* Test 9: Annotation on universal in polymorphic parameter *)

let f (x : 'a. 'a -> 'a) = x "string"

(**************************************)
(* Test 10: Parsing & pretty-printing *)

let f (type a) (x : a) = x

let f (type a) (x : a) = x

let f (type a) (x : a) = x

let o =
  object
    method m : type a. a -> a = fun x -> x
  end

let f : type a. a -> a = fun x -> x

let f x =
  let g (type a) (x : a) = x in
  g x [@nontail]

let f x y (type a) (z : a) = z

let f x y (type a) (z : a) = z

external f : 'a. 'a -> 'a = "%identity"

type _ t2_any

exception E : 'a 'b. 'b t2_any * 'a list -> exn

let f (x : 'a. 'a -> 'a) = (x 3, x true)

type _ a = Mk : [> ] * 'a -> int a

module type S = sig
  type _ a = Mk : [> ] * 'a -> int a

  val f_imm : 'a 'b. 'a -> 'a

  val f_val : 'a. 'a -> 'a

  type _ g = MkG : 'a. 'a g

  type t = int
end

let f_imm : 'a. 'a -> 'a = fun x -> x

let f_val : 'a. 'a -> 'a = fun x -> f_imm x

type _ g = MkG : 'a. 'a g

type t = int

type t = ('a, 'b) t2

type ('a, 'b) t = 'a * 'b

class c : object
  method m : 'a. 'a -> 'a

  val f : 'a -> 'a
end =
  object
    method m : type a. a -> a = fun x -> x

    val f = fun (x : 'a) -> x
  end

type _ g = MkG : 'a 'b. 'a -> 'b g

type 'a t3 = ..

type _ t3 += MkG : 'a 'b. 'a -> 'b t3

let f_gadt : 'a. 'a -> 'a g -> 'a = fun x MkG -> f_imm x

(* comments *)
val foo :
  (* comment 1 *)
  'k
  (* comment 2 *)
  (* comment 3 *)
  (* comment 4 *)
  (* comment 5 *) 'cmp.
     (module S
        with type Id_and_repr.t = 'k
         and type Id_and_repr.comparator_witness = 'cmp )
  -> 'k Jane_symbol.Map.t
  -> ('k, Sockaddr.t, 'cmp) Map.t

type a = b (* comment 0 *) as (* comment 1 *)
         'k
(* comment 2 *)

(* comment 3 *)

(* comment 4 *)
(* comment 5 *)

let f (type a) x = x

let f (type a b c d e f g h i j k l m n o p q r s t u v w x y z) x = x

let f (type a b) x = x

let f (type a b) x = x

let f (type a b) x = x

module type S = sig
  val init_with_immediates : 'a 'b. int -> f:(int -> 'a) -> 'a t
end

(**************************************)
(* Test 11: Arbitrary strings as layout names *)

type t_asdf

let x : int as 'a = 5

let f : 'a. 'a t -> 'a t = fun x -> x

let _ : _ =
  [%str
    let%lpoly rec fold (type a acc) (xs : a list) ~(init : acc) ~f =
      match xs with [] -> init | x :: xs -> fold xs ~init:(f init x) ~f
    [@@layout (poly : value bits64), (acc : value bits64)]]
